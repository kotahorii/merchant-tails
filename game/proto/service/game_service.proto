syntax = "proto3";

package service;

option go_package = "github.com/yourusername/merchant-tails/game/internal/gen/service";

import "save/gamestate.proto";
import "config/game_config.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// GameService provides game state management via Connect-RPC
service GameService {
  // Save operations
  rpc SaveGame(SaveGameRequest) returns (SaveGameResponse);
  rpc LoadGame(LoadGameRequest) returns (LoadGameResponse);
  rpc QuickSave(QuickSaveRequest) returns (SaveGameResponse);
  rpc AutoSave(AutoSaveRequest) returns (SaveGameResponse);
  rpc ListSaves(ListSavesRequest) returns (ListSavesResponse);
  rpc DeleteSave(DeleteSaveRequest) returns (google.protobuf.Empty);
  
  // Game state operations
  rpc GetGameState(google.protobuf.Empty) returns (save.GameState);
  rpc UpdateGameState(UpdateGameStateRequest) returns (google.protobuf.Empty);
  
  // Settings operations
  rpc GetSettings(google.protobuf.Empty) returns (SettingsResponse);
  rpc UpdateSettings(UpdateSettingsRequest) returns (google.protobuf.Empty);
  rpc ResetSettings(ResetSettingsRequest) returns (google.protobuf.Empty);
  
  // Game flow control
  rpc PauseGame(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc ResumeGame(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetGameSpeed(SetGameSpeedRequest) returns (google.protobuf.Empty);
  
  // Streaming updates
  rpc StreamGameState(google.protobuf.Empty) returns (stream GameStateUpdate);
  rpc StreamMarketData(google.protobuf.Empty) returns (stream MarketDataUpdate);
  rpc StreamEvents(google.protobuf.Empty) returns (stream EventUpdate);
}

// Save/Load messages
message SaveGameRequest {
  string save_name = 1;
  bool compress = 2;
  bool encrypt = 3;
  map<string, string> metadata = 4;
}

message SaveGameResponse {
  bool success = 1;
  string save_path = 2;
  string error_message = 3;
  google.protobuf.Timestamp save_time = 4;
}

message LoadGameRequest {
  string save_name = 1;
}

message LoadGameResponse {
  bool success = 1;
  save.GameState game_state = 2;
  string error_message = 3;
}

message QuickSaveRequest {
  string slot_number = 1;
}

message AutoSaveRequest {
  bool force = 1;
}

message ListSavesRequest {
  int32 limit = 1;
  int32 offset = 2;
  string filter_type = 3; // "all", "manual", "quick", "auto"
}

message ListSavesResponse {
  repeated SaveInfo saves = 1;
  int32 total_count = 2;
}

message SaveInfo {
  string save_name = 1;
  string save_path = 2;
  google.protobuf.Timestamp save_time = 3;
  int64 file_size = 4;
  string version = 5;
  string player_name = 6;
  int32 day_number = 7;
  double gold = 8;
  bool is_auto_save = 9;
  bool is_quick_save = 10;
  map<string, string> metadata = 11;
}

message DeleteSaveRequest {
  string save_name = 1;
}

// Game state messages
message UpdateGameStateRequest {
  save.GameState game_state = 1;
  repeated string update_fields = 2; // Partial update support
}

// Settings messages
message SettingsResponse {
  GameSettings settings = 1;
}

message GameSettings {
  // Game settings
  double game_speed = 1;
  string difficulty = 2;
  bool auto_save = 3;
  int32 auto_save_interval_minutes = 4;
  
  // Graphics settings
  Resolution resolution = 5;
  bool fullscreen = 6;
  bool vsync = 7;
  int32 target_fps = 8;
  string quality_preset = 9;
  
  // Audio settings
  double master_volume = 10;
  double music_volume = 11;
  double sfx_volume = 12;
  double ui_volume = 13;
  
  // UI settings
  bool show_fps = 14;
  bool show_notifications = 15;
  bool show_tutorial_hints = 16;
  double ui_scale = 17;
  
  // Accessibility
  string colorblind_mode = 18;
  bool high_contrast = 19;
  bool subtitles_enabled = 20;
  
  // Custom settings
  map<string, string> custom_settings = 21;
}

message Resolution {
  int32 width = 1;
  int32 height = 2;
}

message UpdateSettingsRequest {
  GameSettings settings = 1;
  repeated string update_fields = 2; // For partial updates
}

message ResetSettingsRequest {
  string category = 1; // "all", "game", "graphics", "audio", "controls", "ui"
}

// Game flow messages
message SetGameSpeedRequest {
  double speed = 1;
}

// Streaming messages
message GameStateUpdate {
  enum UpdateType {
    UPDATE_TYPE_UNKNOWN = 0;
    UPDATE_TYPE_GOLD = 1;
    UPDATE_TYPE_INVENTORY = 2;
    UPDATE_TYPE_REPUTATION = 3;
    UPDATE_TYPE_TIME = 4;
    UPDATE_TYPE_FULL = 5;
  }
  
  UpdateType type = 1;
  google.protobuf.Timestamp timestamp = 2;
  oneof update {
    double gold = 3;
    save.InventoryData inventory = 4;
    int32 reputation = 5;
    TimeUpdate time = 6;
    save.GameState full_state = 7;
  }
}

message TimeUpdate {
  int32 day_number = 1;
  string season = 2;
  string time_of_day = 3;
  int32 year = 4;
}

message MarketDataUpdate {
  google.protobuf.Timestamp timestamp = 1;
  repeated PriceUpdate price_updates = 2;
  string market_trend = 3;
  double volatility = 4;
}

message PriceUpdate {
  string item_id = 1;
  string item_name = 2;
  double old_price = 3;
  double new_price = 4;
  double price_change_percent = 5;
}

message EventUpdate {
  string event_id = 1;
  string event_type = 2;
  string event_name = 3;
  string description = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, string> parameters = 6;
}

// Analytics Service for game metrics
service AnalyticsService {
  rpc GetDailySummary(GetDailySummaryRequest) returns (DailySummaryResponse);
  rpc GetWeeklySummary(GetWeeklySummaryRequest) returns (WeeklySummaryResponse);
  rpc GetPerformanceMetrics(GetPerformanceMetricsRequest) returns (PerformanceMetricsResponse);
  rpc StreamMetrics(google.protobuf.Empty) returns (stream MetricUpdate);
}

message GetDailySummaryRequest {
  int32 day_number = 1;
}

message DailySummaryResponse {
  int32 day_number = 1;
  double starting_gold = 2;
  double ending_gold = 3;
  double profit = 4;
  double profit_margin = 5;
  int32 items_bought = 6;
  int32 items_sold = 7;
  int32 customers_served = 8;
  repeated string events_occurred = 9;
  repeated string achievements_earned = 10;
}

message GetWeeklySummaryRequest {
  int32 week_number = 1;
}

message WeeklySummaryResponse {
  int32 week_number = 1;
  double total_profit = 2;
  double average_daily_profit = 3;
  DailySummaryResponse best_day = 4;
  DailySummaryResponse worst_day = 5;
  string profit_trend = 6;
}

message GetPerformanceMetricsRequest {
  int32 days = 1;
}

message PerformanceMetricsResponse {
  map<string, double> metrics = 1;
}

message MetricUpdate {
  string metric_name = 1;
  double value = 2;
  google.protobuf.Timestamp timestamp = 3;
}