// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/game_service.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	save "github.com/yourusername/merchant-tails/game/internal/gen/save"
	service "github.com/yourusername/merchant-tails/game/internal/gen/service"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "service.GameService"
	// AnalyticsServiceName is the fully-qualified name of the AnalyticsService service.
	AnalyticsServiceName = "service.AnalyticsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServiceSaveGameProcedure is the fully-qualified name of the GameService's SaveGame RPC.
	GameServiceSaveGameProcedure = "/service.GameService/SaveGame"
	// GameServiceLoadGameProcedure is the fully-qualified name of the GameService's LoadGame RPC.
	GameServiceLoadGameProcedure = "/service.GameService/LoadGame"
	// GameServiceQuickSaveProcedure is the fully-qualified name of the GameService's QuickSave RPC.
	GameServiceQuickSaveProcedure = "/service.GameService/QuickSave"
	// GameServiceAutoSaveProcedure is the fully-qualified name of the GameService's AutoSave RPC.
	GameServiceAutoSaveProcedure = "/service.GameService/AutoSave"
	// GameServiceListSavesProcedure is the fully-qualified name of the GameService's ListSaves RPC.
	GameServiceListSavesProcedure = "/service.GameService/ListSaves"
	// GameServiceDeleteSaveProcedure is the fully-qualified name of the GameService's DeleteSave RPC.
	GameServiceDeleteSaveProcedure = "/service.GameService/DeleteSave"
	// GameServiceGetGameStateProcedure is the fully-qualified name of the GameService's GetGameState
	// RPC.
	GameServiceGetGameStateProcedure = "/service.GameService/GetGameState"
	// GameServiceUpdateGameStateProcedure is the fully-qualified name of the GameService's
	// UpdateGameState RPC.
	GameServiceUpdateGameStateProcedure = "/service.GameService/UpdateGameState"
	// GameServiceGetSettingsProcedure is the fully-qualified name of the GameService's GetSettings RPC.
	GameServiceGetSettingsProcedure = "/service.GameService/GetSettings"
	// GameServiceUpdateSettingsProcedure is the fully-qualified name of the GameService's
	// UpdateSettings RPC.
	GameServiceUpdateSettingsProcedure = "/service.GameService/UpdateSettings"
	// GameServiceResetSettingsProcedure is the fully-qualified name of the GameService's ResetSettings
	// RPC.
	GameServiceResetSettingsProcedure = "/service.GameService/ResetSettings"
	// GameServicePauseGameProcedure is the fully-qualified name of the GameService's PauseGame RPC.
	GameServicePauseGameProcedure = "/service.GameService/PauseGame"
	// GameServiceResumeGameProcedure is the fully-qualified name of the GameService's ResumeGame RPC.
	GameServiceResumeGameProcedure = "/service.GameService/ResumeGame"
	// GameServiceSetGameSpeedProcedure is the fully-qualified name of the GameService's SetGameSpeed
	// RPC.
	GameServiceSetGameSpeedProcedure = "/service.GameService/SetGameSpeed"
	// GameServiceStreamGameStateProcedure is the fully-qualified name of the GameService's
	// StreamGameState RPC.
	GameServiceStreamGameStateProcedure = "/service.GameService/StreamGameState"
	// GameServiceStreamMarketDataProcedure is the fully-qualified name of the GameService's
	// StreamMarketData RPC.
	GameServiceStreamMarketDataProcedure = "/service.GameService/StreamMarketData"
	// GameServiceStreamEventsProcedure is the fully-qualified name of the GameService's StreamEvents
	// RPC.
	GameServiceStreamEventsProcedure = "/service.GameService/StreamEvents"
	// AnalyticsServiceGetDailySummaryProcedure is the fully-qualified name of the AnalyticsService's
	// GetDailySummary RPC.
	AnalyticsServiceGetDailySummaryProcedure = "/service.AnalyticsService/GetDailySummary"
	// AnalyticsServiceGetWeeklySummaryProcedure is the fully-qualified name of the AnalyticsService's
	// GetWeeklySummary RPC.
	AnalyticsServiceGetWeeklySummaryProcedure = "/service.AnalyticsService/GetWeeklySummary"
	// AnalyticsServiceGetPerformanceMetricsProcedure is the fully-qualified name of the
	// AnalyticsService's GetPerformanceMetrics RPC.
	AnalyticsServiceGetPerformanceMetricsProcedure = "/service.AnalyticsService/GetPerformanceMetrics"
	// AnalyticsServiceStreamMetricsProcedure is the fully-qualified name of the AnalyticsService's
	// StreamMetrics RPC.
	AnalyticsServiceStreamMetricsProcedure = "/service.AnalyticsService/StreamMetrics"
)

// GameServiceClient is a client for the service.GameService service.
type GameServiceClient interface {
	// Save operations
	SaveGame(context.Context, *connect.Request[service.SaveGameRequest]) (*connect.Response[service.SaveGameResponse], error)
	LoadGame(context.Context, *connect.Request[service.LoadGameRequest]) (*connect.Response[service.LoadGameResponse], error)
	QuickSave(context.Context, *connect.Request[service.QuickSaveRequest]) (*connect.Response[service.SaveGameResponse], error)
	AutoSave(context.Context, *connect.Request[service.AutoSaveRequest]) (*connect.Response[service.SaveGameResponse], error)
	ListSaves(context.Context, *connect.Request[service.ListSavesRequest]) (*connect.Response[service.ListSavesResponse], error)
	DeleteSave(context.Context, *connect.Request[service.DeleteSaveRequest]) (*connect.Response[emptypb.Empty], error)
	// Game state operations
	GetGameState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[save.GameState], error)
	UpdateGameState(context.Context, *connect.Request[service.UpdateGameStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Settings operations
	GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.SettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[service.UpdateSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	ResetSettings(context.Context, *connect.Request[service.ResetSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	// Game flow control
	PauseGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	ResumeGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	SetGameSpeed(context.Context, *connect.Request[service.SetGameSpeedRequest]) (*connect.Response[emptypb.Empty], error)
	// Streaming updates
	StreamGameState(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.GameStateUpdate], error)
	StreamMarketData(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.MarketDataUpdate], error)
	StreamEvents(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.EventUpdate], error)
}

// NewGameServiceClient constructs a client for the service.GameService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gameServiceMethods := service.File_service_game_service_proto.Services().ByName("GameService").Methods()
	return &gameServiceClient{
		saveGame: connect.NewClient[service.SaveGameRequest, service.SaveGameResponse](
			httpClient,
			baseURL+GameServiceSaveGameProcedure,
			connect.WithSchema(gameServiceMethods.ByName("SaveGame")),
			connect.WithClientOptions(opts...),
		),
		loadGame: connect.NewClient[service.LoadGameRequest, service.LoadGameResponse](
			httpClient,
			baseURL+GameServiceLoadGameProcedure,
			connect.WithSchema(gameServiceMethods.ByName("LoadGame")),
			connect.WithClientOptions(opts...),
		),
		quickSave: connect.NewClient[service.QuickSaveRequest, service.SaveGameResponse](
			httpClient,
			baseURL+GameServiceQuickSaveProcedure,
			connect.WithSchema(gameServiceMethods.ByName("QuickSave")),
			connect.WithClientOptions(opts...),
		),
		autoSave: connect.NewClient[service.AutoSaveRequest, service.SaveGameResponse](
			httpClient,
			baseURL+GameServiceAutoSaveProcedure,
			connect.WithSchema(gameServiceMethods.ByName("AutoSave")),
			connect.WithClientOptions(opts...),
		),
		listSaves: connect.NewClient[service.ListSavesRequest, service.ListSavesResponse](
			httpClient,
			baseURL+GameServiceListSavesProcedure,
			connect.WithSchema(gameServiceMethods.ByName("ListSaves")),
			connect.WithClientOptions(opts...),
		),
		deleteSave: connect.NewClient[service.DeleteSaveRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceDeleteSaveProcedure,
			connect.WithSchema(gameServiceMethods.ByName("DeleteSave")),
			connect.WithClientOptions(opts...),
		),
		getGameState: connect.NewClient[emptypb.Empty, save.GameState](
			httpClient,
			baseURL+GameServiceGetGameStateProcedure,
			connect.WithSchema(gameServiceMethods.ByName("GetGameState")),
			connect.WithClientOptions(opts...),
		),
		updateGameState: connect.NewClient[service.UpdateGameStateRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceUpdateGameStateProcedure,
			connect.WithSchema(gameServiceMethods.ByName("UpdateGameState")),
			connect.WithClientOptions(opts...),
		),
		getSettings: connect.NewClient[emptypb.Empty, service.SettingsResponse](
			httpClient,
			baseURL+GameServiceGetSettingsProcedure,
			connect.WithSchema(gameServiceMethods.ByName("GetSettings")),
			connect.WithClientOptions(opts...),
		),
		updateSettings: connect.NewClient[service.UpdateSettingsRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceUpdateSettingsProcedure,
			connect.WithSchema(gameServiceMethods.ByName("UpdateSettings")),
			connect.WithClientOptions(opts...),
		),
		resetSettings: connect.NewClient[service.ResetSettingsRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceResetSettingsProcedure,
			connect.WithSchema(gameServiceMethods.ByName("ResetSettings")),
			connect.WithClientOptions(opts...),
		),
		pauseGame: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServicePauseGameProcedure,
			connect.WithSchema(gameServiceMethods.ByName("PauseGame")),
			connect.WithClientOptions(opts...),
		),
		resumeGame: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServiceResumeGameProcedure,
			connect.WithSchema(gameServiceMethods.ByName("ResumeGame")),
			connect.WithClientOptions(opts...),
		),
		setGameSpeed: connect.NewClient[service.SetGameSpeedRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceSetGameSpeedProcedure,
			connect.WithSchema(gameServiceMethods.ByName("SetGameSpeed")),
			connect.WithClientOptions(opts...),
		),
		streamGameState: connect.NewClient[emptypb.Empty, service.GameStateUpdate](
			httpClient,
			baseURL+GameServiceStreamGameStateProcedure,
			connect.WithSchema(gameServiceMethods.ByName("StreamGameState")),
			connect.WithClientOptions(opts...),
		),
		streamMarketData: connect.NewClient[emptypb.Empty, service.MarketDataUpdate](
			httpClient,
			baseURL+GameServiceStreamMarketDataProcedure,
			connect.WithSchema(gameServiceMethods.ByName("StreamMarketData")),
			connect.WithClientOptions(opts...),
		),
		streamEvents: connect.NewClient[emptypb.Empty, service.EventUpdate](
			httpClient,
			baseURL+GameServiceStreamEventsProcedure,
			connect.WithSchema(gameServiceMethods.ByName("StreamEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	saveGame         *connect.Client[service.SaveGameRequest, service.SaveGameResponse]
	loadGame         *connect.Client[service.LoadGameRequest, service.LoadGameResponse]
	quickSave        *connect.Client[service.QuickSaveRequest, service.SaveGameResponse]
	autoSave         *connect.Client[service.AutoSaveRequest, service.SaveGameResponse]
	listSaves        *connect.Client[service.ListSavesRequest, service.ListSavesResponse]
	deleteSave       *connect.Client[service.DeleteSaveRequest, emptypb.Empty]
	getGameState     *connect.Client[emptypb.Empty, save.GameState]
	updateGameState  *connect.Client[service.UpdateGameStateRequest, emptypb.Empty]
	getSettings      *connect.Client[emptypb.Empty, service.SettingsResponse]
	updateSettings   *connect.Client[service.UpdateSettingsRequest, emptypb.Empty]
	resetSettings    *connect.Client[service.ResetSettingsRequest, emptypb.Empty]
	pauseGame        *connect.Client[emptypb.Empty, emptypb.Empty]
	resumeGame       *connect.Client[emptypb.Empty, emptypb.Empty]
	setGameSpeed     *connect.Client[service.SetGameSpeedRequest, emptypb.Empty]
	streamGameState  *connect.Client[emptypb.Empty, service.GameStateUpdate]
	streamMarketData *connect.Client[emptypb.Empty, service.MarketDataUpdate]
	streamEvents     *connect.Client[emptypb.Empty, service.EventUpdate]
}

// SaveGame calls service.GameService.SaveGame.
func (c *gameServiceClient) SaveGame(ctx context.Context, req *connect.Request[service.SaveGameRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return c.saveGame.CallUnary(ctx, req)
}

// LoadGame calls service.GameService.LoadGame.
func (c *gameServiceClient) LoadGame(ctx context.Context, req *connect.Request[service.LoadGameRequest]) (*connect.Response[service.LoadGameResponse], error) {
	return c.loadGame.CallUnary(ctx, req)
}

// QuickSave calls service.GameService.QuickSave.
func (c *gameServiceClient) QuickSave(ctx context.Context, req *connect.Request[service.QuickSaveRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return c.quickSave.CallUnary(ctx, req)
}

// AutoSave calls service.GameService.AutoSave.
func (c *gameServiceClient) AutoSave(ctx context.Context, req *connect.Request[service.AutoSaveRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return c.autoSave.CallUnary(ctx, req)
}

// ListSaves calls service.GameService.ListSaves.
func (c *gameServiceClient) ListSaves(ctx context.Context, req *connect.Request[service.ListSavesRequest]) (*connect.Response[service.ListSavesResponse], error) {
	return c.listSaves.CallUnary(ctx, req)
}

// DeleteSave calls service.GameService.DeleteSave.
func (c *gameServiceClient) DeleteSave(ctx context.Context, req *connect.Request[service.DeleteSaveRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteSave.CallUnary(ctx, req)
}

// GetGameState calls service.GameService.GetGameState.
func (c *gameServiceClient) GetGameState(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[save.GameState], error) {
	return c.getGameState.CallUnary(ctx, req)
}

// UpdateGameState calls service.GameService.UpdateGameState.
func (c *gameServiceClient) UpdateGameState(ctx context.Context, req *connect.Request[service.UpdateGameStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateGameState.CallUnary(ctx, req)
}

// GetSettings calls service.GameService.GetSettings.
func (c *gameServiceClient) GetSettings(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[service.SettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// UpdateSettings calls service.GameService.UpdateSettings.
func (c *gameServiceClient) UpdateSettings(ctx context.Context, req *connect.Request[service.UpdateSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateSettings.CallUnary(ctx, req)
}

// ResetSettings calls service.GameService.ResetSettings.
func (c *gameServiceClient) ResetSettings(ctx context.Context, req *connect.Request[service.ResetSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resetSettings.CallUnary(ctx, req)
}

// PauseGame calls service.GameService.PauseGame.
func (c *gameServiceClient) PauseGame(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseGame.CallUnary(ctx, req)
}

// ResumeGame calls service.GameService.ResumeGame.
func (c *gameServiceClient) ResumeGame(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeGame.CallUnary(ctx, req)
}

// SetGameSpeed calls service.GameService.SetGameSpeed.
func (c *gameServiceClient) SetGameSpeed(ctx context.Context, req *connect.Request[service.SetGameSpeedRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setGameSpeed.CallUnary(ctx, req)
}

// StreamGameState calls service.GameService.StreamGameState.
func (c *gameServiceClient) StreamGameState(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.GameStateUpdate], error) {
	return c.streamGameState.CallServerStream(ctx, req)
}

// StreamMarketData calls service.GameService.StreamMarketData.
func (c *gameServiceClient) StreamMarketData(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.MarketDataUpdate], error) {
	return c.streamMarketData.CallServerStream(ctx, req)
}

// StreamEvents calls service.GameService.StreamEvents.
func (c *gameServiceClient) StreamEvents(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.EventUpdate], error) {
	return c.streamEvents.CallServerStream(ctx, req)
}

// GameServiceHandler is an implementation of the service.GameService service.
type GameServiceHandler interface {
	// Save operations
	SaveGame(context.Context, *connect.Request[service.SaveGameRequest]) (*connect.Response[service.SaveGameResponse], error)
	LoadGame(context.Context, *connect.Request[service.LoadGameRequest]) (*connect.Response[service.LoadGameResponse], error)
	QuickSave(context.Context, *connect.Request[service.QuickSaveRequest]) (*connect.Response[service.SaveGameResponse], error)
	AutoSave(context.Context, *connect.Request[service.AutoSaveRequest]) (*connect.Response[service.SaveGameResponse], error)
	ListSaves(context.Context, *connect.Request[service.ListSavesRequest]) (*connect.Response[service.ListSavesResponse], error)
	DeleteSave(context.Context, *connect.Request[service.DeleteSaveRequest]) (*connect.Response[emptypb.Empty], error)
	// Game state operations
	GetGameState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[save.GameState], error)
	UpdateGameState(context.Context, *connect.Request[service.UpdateGameStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Settings operations
	GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.SettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[service.UpdateSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	ResetSettings(context.Context, *connect.Request[service.ResetSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	// Game flow control
	PauseGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	ResumeGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	SetGameSpeed(context.Context, *connect.Request[service.SetGameSpeedRequest]) (*connect.Response[emptypb.Empty], error)
	// Streaming updates
	StreamGameState(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.GameStateUpdate]) error
	StreamMarketData(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.MarketDataUpdate]) error
	StreamEvents(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.EventUpdate]) error
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameServiceMethods := service.File_service_game_service_proto.Services().ByName("GameService").Methods()
	gameServiceSaveGameHandler := connect.NewUnaryHandler(
		GameServiceSaveGameProcedure,
		svc.SaveGame,
		connect.WithSchema(gameServiceMethods.ByName("SaveGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceLoadGameHandler := connect.NewUnaryHandler(
		GameServiceLoadGameProcedure,
		svc.LoadGame,
		connect.WithSchema(gameServiceMethods.ByName("LoadGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceQuickSaveHandler := connect.NewUnaryHandler(
		GameServiceQuickSaveProcedure,
		svc.QuickSave,
		connect.WithSchema(gameServiceMethods.ByName("QuickSave")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceAutoSaveHandler := connect.NewUnaryHandler(
		GameServiceAutoSaveProcedure,
		svc.AutoSave,
		connect.WithSchema(gameServiceMethods.ByName("AutoSave")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceListSavesHandler := connect.NewUnaryHandler(
		GameServiceListSavesProcedure,
		svc.ListSaves,
		connect.WithSchema(gameServiceMethods.ByName("ListSaves")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceDeleteSaveHandler := connect.NewUnaryHandler(
		GameServiceDeleteSaveProcedure,
		svc.DeleteSave,
		connect.WithSchema(gameServiceMethods.ByName("DeleteSave")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceGetGameStateHandler := connect.NewUnaryHandler(
		GameServiceGetGameStateProcedure,
		svc.GetGameState,
		connect.WithSchema(gameServiceMethods.ByName("GetGameState")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceUpdateGameStateHandler := connect.NewUnaryHandler(
		GameServiceUpdateGameStateProcedure,
		svc.UpdateGameState,
		connect.WithSchema(gameServiceMethods.ByName("UpdateGameState")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceGetSettingsHandler := connect.NewUnaryHandler(
		GameServiceGetSettingsProcedure,
		svc.GetSettings,
		connect.WithSchema(gameServiceMethods.ByName("GetSettings")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceUpdateSettingsHandler := connect.NewUnaryHandler(
		GameServiceUpdateSettingsProcedure,
		svc.UpdateSettings,
		connect.WithSchema(gameServiceMethods.ByName("UpdateSettings")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceResetSettingsHandler := connect.NewUnaryHandler(
		GameServiceResetSettingsProcedure,
		svc.ResetSettings,
		connect.WithSchema(gameServiceMethods.ByName("ResetSettings")),
		connect.WithHandlerOptions(opts...),
	)
	gameServicePauseGameHandler := connect.NewUnaryHandler(
		GameServicePauseGameProcedure,
		svc.PauseGame,
		connect.WithSchema(gameServiceMethods.ByName("PauseGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceResumeGameHandler := connect.NewUnaryHandler(
		GameServiceResumeGameProcedure,
		svc.ResumeGame,
		connect.WithSchema(gameServiceMethods.ByName("ResumeGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceSetGameSpeedHandler := connect.NewUnaryHandler(
		GameServiceSetGameSpeedProcedure,
		svc.SetGameSpeed,
		connect.WithSchema(gameServiceMethods.ByName("SetGameSpeed")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceStreamGameStateHandler := connect.NewServerStreamHandler(
		GameServiceStreamGameStateProcedure,
		svc.StreamGameState,
		connect.WithSchema(gameServiceMethods.ByName("StreamGameState")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceStreamMarketDataHandler := connect.NewServerStreamHandler(
		GameServiceStreamMarketDataProcedure,
		svc.StreamMarketData,
		connect.WithSchema(gameServiceMethods.ByName("StreamMarketData")),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceStreamEventsHandler := connect.NewServerStreamHandler(
		GameServiceStreamEventsProcedure,
		svc.StreamEvents,
		connect.WithSchema(gameServiceMethods.ByName("StreamEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceSaveGameProcedure:
			gameServiceSaveGameHandler.ServeHTTP(w, r)
		case GameServiceLoadGameProcedure:
			gameServiceLoadGameHandler.ServeHTTP(w, r)
		case GameServiceQuickSaveProcedure:
			gameServiceQuickSaveHandler.ServeHTTP(w, r)
		case GameServiceAutoSaveProcedure:
			gameServiceAutoSaveHandler.ServeHTTP(w, r)
		case GameServiceListSavesProcedure:
			gameServiceListSavesHandler.ServeHTTP(w, r)
		case GameServiceDeleteSaveProcedure:
			gameServiceDeleteSaveHandler.ServeHTTP(w, r)
		case GameServiceGetGameStateProcedure:
			gameServiceGetGameStateHandler.ServeHTTP(w, r)
		case GameServiceUpdateGameStateProcedure:
			gameServiceUpdateGameStateHandler.ServeHTTP(w, r)
		case GameServiceGetSettingsProcedure:
			gameServiceGetSettingsHandler.ServeHTTP(w, r)
		case GameServiceUpdateSettingsProcedure:
			gameServiceUpdateSettingsHandler.ServeHTTP(w, r)
		case GameServiceResetSettingsProcedure:
			gameServiceResetSettingsHandler.ServeHTTP(w, r)
		case GameServicePauseGameProcedure:
			gameServicePauseGameHandler.ServeHTTP(w, r)
		case GameServiceResumeGameProcedure:
			gameServiceResumeGameHandler.ServeHTTP(w, r)
		case GameServiceSetGameSpeedProcedure:
			gameServiceSetGameSpeedHandler.ServeHTTP(w, r)
		case GameServiceStreamGameStateProcedure:
			gameServiceStreamGameStateHandler.ServeHTTP(w, r)
		case GameServiceStreamMarketDataProcedure:
			gameServiceStreamMarketDataHandler.ServeHTTP(w, r)
		case GameServiceStreamEventsProcedure:
			gameServiceStreamEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) SaveGame(context.Context, *connect.Request[service.SaveGameRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.SaveGame is not implemented"))
}

func (UnimplementedGameServiceHandler) LoadGame(context.Context, *connect.Request[service.LoadGameRequest]) (*connect.Response[service.LoadGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.LoadGame is not implemented"))
}

func (UnimplementedGameServiceHandler) QuickSave(context.Context, *connect.Request[service.QuickSaveRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.QuickSave is not implemented"))
}

func (UnimplementedGameServiceHandler) AutoSave(context.Context, *connect.Request[service.AutoSaveRequest]) (*connect.Response[service.SaveGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.AutoSave is not implemented"))
}

func (UnimplementedGameServiceHandler) ListSaves(context.Context, *connect.Request[service.ListSavesRequest]) (*connect.Response[service.ListSavesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.ListSaves is not implemented"))
}

func (UnimplementedGameServiceHandler) DeleteSave(context.Context, *connect.Request[service.DeleteSaveRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.DeleteSave is not implemented"))
}

func (UnimplementedGameServiceHandler) GetGameState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[save.GameState], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.GetGameState is not implemented"))
}

func (UnimplementedGameServiceHandler) UpdateGameState(context.Context, *connect.Request[service.UpdateGameStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.UpdateGameState is not implemented"))
}

func (UnimplementedGameServiceHandler) GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.SettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.GetSettings is not implemented"))
}

func (UnimplementedGameServiceHandler) UpdateSettings(context.Context, *connect.Request[service.UpdateSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.UpdateSettings is not implemented"))
}

func (UnimplementedGameServiceHandler) ResetSettings(context.Context, *connect.Request[service.ResetSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.ResetSettings is not implemented"))
}

func (UnimplementedGameServiceHandler) PauseGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.PauseGame is not implemented"))
}

func (UnimplementedGameServiceHandler) ResumeGame(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.ResumeGame is not implemented"))
}

func (UnimplementedGameServiceHandler) SetGameSpeed(context.Context, *connect.Request[service.SetGameSpeedRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.SetGameSpeed is not implemented"))
}

func (UnimplementedGameServiceHandler) StreamGameState(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.GameStateUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.StreamGameState is not implemented"))
}

func (UnimplementedGameServiceHandler) StreamMarketData(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.MarketDataUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.StreamMarketData is not implemented"))
}

func (UnimplementedGameServiceHandler) StreamEvents(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.EventUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("service.GameService.StreamEvents is not implemented"))
}

// AnalyticsServiceClient is a client for the service.AnalyticsService service.
type AnalyticsServiceClient interface {
	GetDailySummary(context.Context, *connect.Request[service.GetDailySummaryRequest]) (*connect.Response[service.DailySummaryResponse], error)
	GetWeeklySummary(context.Context, *connect.Request[service.GetWeeklySummaryRequest]) (*connect.Response[service.WeeklySummaryResponse], error)
	GetPerformanceMetrics(context.Context, *connect.Request[service.GetPerformanceMetricsRequest]) (*connect.Response[service.PerformanceMetricsResponse], error)
	StreamMetrics(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.MetricUpdate], error)
}

// NewAnalyticsServiceClient constructs a client for the service.AnalyticsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnalyticsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnalyticsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	analyticsServiceMethods := service.File_service_game_service_proto.Services().ByName("AnalyticsService").Methods()
	return &analyticsServiceClient{
		getDailySummary: connect.NewClient[service.GetDailySummaryRequest, service.DailySummaryResponse](
			httpClient,
			baseURL+AnalyticsServiceGetDailySummaryProcedure,
			connect.WithSchema(analyticsServiceMethods.ByName("GetDailySummary")),
			connect.WithClientOptions(opts...),
		),
		getWeeklySummary: connect.NewClient[service.GetWeeklySummaryRequest, service.WeeklySummaryResponse](
			httpClient,
			baseURL+AnalyticsServiceGetWeeklySummaryProcedure,
			connect.WithSchema(analyticsServiceMethods.ByName("GetWeeklySummary")),
			connect.WithClientOptions(opts...),
		),
		getPerformanceMetrics: connect.NewClient[service.GetPerformanceMetricsRequest, service.PerformanceMetricsResponse](
			httpClient,
			baseURL+AnalyticsServiceGetPerformanceMetricsProcedure,
			connect.WithSchema(analyticsServiceMethods.ByName("GetPerformanceMetrics")),
			connect.WithClientOptions(opts...),
		),
		streamMetrics: connect.NewClient[emptypb.Empty, service.MetricUpdate](
			httpClient,
			baseURL+AnalyticsServiceStreamMetricsProcedure,
			connect.WithSchema(analyticsServiceMethods.ByName("StreamMetrics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// analyticsServiceClient implements AnalyticsServiceClient.
type analyticsServiceClient struct {
	getDailySummary       *connect.Client[service.GetDailySummaryRequest, service.DailySummaryResponse]
	getWeeklySummary      *connect.Client[service.GetWeeklySummaryRequest, service.WeeklySummaryResponse]
	getPerformanceMetrics *connect.Client[service.GetPerformanceMetricsRequest, service.PerformanceMetricsResponse]
	streamMetrics         *connect.Client[emptypb.Empty, service.MetricUpdate]
}

// GetDailySummary calls service.AnalyticsService.GetDailySummary.
func (c *analyticsServiceClient) GetDailySummary(ctx context.Context, req *connect.Request[service.GetDailySummaryRequest]) (*connect.Response[service.DailySummaryResponse], error) {
	return c.getDailySummary.CallUnary(ctx, req)
}

// GetWeeklySummary calls service.AnalyticsService.GetWeeklySummary.
func (c *analyticsServiceClient) GetWeeklySummary(ctx context.Context, req *connect.Request[service.GetWeeklySummaryRequest]) (*connect.Response[service.WeeklySummaryResponse], error) {
	return c.getWeeklySummary.CallUnary(ctx, req)
}

// GetPerformanceMetrics calls service.AnalyticsService.GetPerformanceMetrics.
func (c *analyticsServiceClient) GetPerformanceMetrics(ctx context.Context, req *connect.Request[service.GetPerformanceMetricsRequest]) (*connect.Response[service.PerformanceMetricsResponse], error) {
	return c.getPerformanceMetrics.CallUnary(ctx, req)
}

// StreamMetrics calls service.AnalyticsService.StreamMetrics.
func (c *analyticsServiceClient) StreamMetrics(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[service.MetricUpdate], error) {
	return c.streamMetrics.CallServerStream(ctx, req)
}

// AnalyticsServiceHandler is an implementation of the service.AnalyticsService service.
type AnalyticsServiceHandler interface {
	GetDailySummary(context.Context, *connect.Request[service.GetDailySummaryRequest]) (*connect.Response[service.DailySummaryResponse], error)
	GetWeeklySummary(context.Context, *connect.Request[service.GetWeeklySummaryRequest]) (*connect.Response[service.WeeklySummaryResponse], error)
	GetPerformanceMetrics(context.Context, *connect.Request[service.GetPerformanceMetricsRequest]) (*connect.Response[service.PerformanceMetricsResponse], error)
	StreamMetrics(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.MetricUpdate]) error
}

// NewAnalyticsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnalyticsServiceHandler(svc AnalyticsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	analyticsServiceMethods := service.File_service_game_service_proto.Services().ByName("AnalyticsService").Methods()
	analyticsServiceGetDailySummaryHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetDailySummaryProcedure,
		svc.GetDailySummary,
		connect.WithSchema(analyticsServiceMethods.ByName("GetDailySummary")),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetWeeklySummaryHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetWeeklySummaryProcedure,
		svc.GetWeeklySummary,
		connect.WithSchema(analyticsServiceMethods.ByName("GetWeeklySummary")),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetPerformanceMetricsHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetPerformanceMetricsProcedure,
		svc.GetPerformanceMetrics,
		connect.WithSchema(analyticsServiceMethods.ByName("GetPerformanceMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceStreamMetricsHandler := connect.NewServerStreamHandler(
		AnalyticsServiceStreamMetricsProcedure,
		svc.StreamMetrics,
		connect.WithSchema(analyticsServiceMethods.ByName("StreamMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.AnalyticsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnalyticsServiceGetDailySummaryProcedure:
			analyticsServiceGetDailySummaryHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetWeeklySummaryProcedure:
			analyticsServiceGetWeeklySummaryHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetPerformanceMetricsProcedure:
			analyticsServiceGetPerformanceMetricsHandler.ServeHTTP(w, r)
		case AnalyticsServiceStreamMetricsProcedure:
			analyticsServiceStreamMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnalyticsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnalyticsServiceHandler struct{}

func (UnimplementedAnalyticsServiceHandler) GetDailySummary(context.Context, *connect.Request[service.GetDailySummaryRequest]) (*connect.Response[service.DailySummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.AnalyticsService.GetDailySummary is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetWeeklySummary(context.Context, *connect.Request[service.GetWeeklySummaryRequest]) (*connect.Response[service.WeeklySummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.AnalyticsService.GetWeeklySummary is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetPerformanceMetrics(context.Context, *connect.Request[service.GetPerformanceMetricsRequest]) (*connect.Response[service.PerformanceMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.AnalyticsService.GetPerformanceMetrics is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) StreamMetrics(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[service.MetricUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("service.AnalyticsService.StreamMetrics is not implemented"))
}
