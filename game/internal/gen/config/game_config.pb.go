// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: config/game_config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GameConfig contains all game configuration data
type GameConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Economy       *EconomyConfig         `protobuf:"bytes,2,opt,name=economy,proto3" json:"economy,omitempty"`
	Items         *ItemDatabase          `protobuf:"bytes,3,opt,name=items,proto3" json:"items,omitempty"`
	Events        *EventConfig           `protobuf:"bytes,4,opt,name=events,proto3" json:"events,omitempty"`
	Progression   *ProgressionConfig     `protobuf:"bytes,5,opt,name=progression,proto3" json:"progression,omitempty"`
	Difficulty    *DifficultyConfig      `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	mi := &file_config_game_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{0}
}

func (x *GameConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GameConfig) GetEconomy() *EconomyConfig {
	if x != nil {
		return x.Economy
	}
	return nil
}

func (x *GameConfig) GetItems() *ItemDatabase {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GameConfig) GetEvents() *EventConfig {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GameConfig) GetProgression() *ProgressionConfig {
	if x != nil {
		return x.Progression
	}
	return nil
}

func (x *GameConfig) GetDifficulty() *DifficultyConfig {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

// EconomyConfig contains economic system parameters
type EconomyConfig struct {
	state                   protoimpl.MessageState       `protogen:"open.v1"`
	BaseInflationRate       float64                      `protobuf:"fixed64,1,opt,name=base_inflation_rate,json=baseInflationRate,proto3" json:"base_inflation_rate,omitempty"`
	MaxPriceVolatility      float64                      `protobuf:"fixed64,2,opt,name=max_price_volatility,json=maxPriceVolatility,proto3" json:"max_price_volatility,omitempty"`
	SeasonalPriceModifier   float64                      `protobuf:"fixed64,3,opt,name=seasonal_price_modifier,json=seasonalPriceModifier,proto3" json:"seasonal_price_modifier,omitempty"`
	EventPriceModifier      float64                      `protobuf:"fixed64,4,opt,name=event_price_modifier,json=eventPriceModifier,proto3" json:"event_price_modifier,omitempty"`
	SupplyDemandSensitivity float64                      `protobuf:"fixed64,5,opt,name=supply_demand_sensitivity,json=supplyDemandSensitivity,proto3" json:"supply_demand_sensitivity,omitempty"`
	MerchantInfluenceFactor float64                      `protobuf:"fixed64,6,opt,name=merchant_influence_factor,json=merchantInfluenceFactor,proto3" json:"merchant_influence_factor,omitempty"`
	PriceHistoryDays        int32                        `protobuf:"varint,7,opt,name=price_history_days,json=priceHistoryDays,proto3" json:"price_history_days,omitempty"`
	SeasonalModifiers       map[string]*SeasonalModifier `protobuf:"bytes,8,rep,name=seasonal_modifiers,json=seasonalModifiers,proto3" json:"seasonal_modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CategoryVolatility      map[string]float64           `protobuf:"bytes,9,rep,name=category_volatility,json=categoryVolatility,proto3" json:"category_volatility,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EconomyConfig) Reset() {
	*x = EconomyConfig{}
	mi := &file_config_game_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EconomyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyConfig) ProtoMessage() {}

func (x *EconomyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyConfig.ProtoReflect.Descriptor instead.
func (*EconomyConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{1}
}

func (x *EconomyConfig) GetBaseInflationRate() float64 {
	if x != nil {
		return x.BaseInflationRate
	}
	return 0
}

func (x *EconomyConfig) GetMaxPriceVolatility() float64 {
	if x != nil {
		return x.MaxPriceVolatility
	}
	return 0
}

func (x *EconomyConfig) GetSeasonalPriceModifier() float64 {
	if x != nil {
		return x.SeasonalPriceModifier
	}
	return 0
}

func (x *EconomyConfig) GetEventPriceModifier() float64 {
	if x != nil {
		return x.EventPriceModifier
	}
	return 0
}

func (x *EconomyConfig) GetSupplyDemandSensitivity() float64 {
	if x != nil {
		return x.SupplyDemandSensitivity
	}
	return 0
}

func (x *EconomyConfig) GetMerchantInfluenceFactor() float64 {
	if x != nil {
		return x.MerchantInfluenceFactor
	}
	return 0
}

func (x *EconomyConfig) GetPriceHistoryDays() int32 {
	if x != nil {
		return x.PriceHistoryDays
	}
	return 0
}

func (x *EconomyConfig) GetSeasonalModifiers() map[string]*SeasonalModifier {
	if x != nil {
		return x.SeasonalModifiers
	}
	return nil
}

func (x *EconomyConfig) GetCategoryVolatility() map[string]float64 {
	if x != nil {
		return x.CategoryVolatility
	}
	return nil
}

// SeasonalModifier defines price modifiers for a season
type SeasonalModifier struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SeasonName      string                 `protobuf:"bytes,1,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`
	ItemModifiers   map[string]float64     `protobuf:"bytes,2,rep,name=item_modifiers,json=itemModifiers,proto3" json:"item_modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	GeneralModifier float64                `protobuf:"fixed64,3,opt,name=general_modifier,json=generalModifier,proto3" json:"general_modifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SeasonalModifier) Reset() {
	*x = SeasonalModifier{}
	mi := &file_config_game_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonalModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonalModifier) ProtoMessage() {}

func (x *SeasonalModifier) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonalModifier.ProtoReflect.Descriptor instead.
func (*SeasonalModifier) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{2}
}

func (x *SeasonalModifier) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *SeasonalModifier) GetItemModifiers() map[string]float64 {
	if x != nil {
		return x.ItemModifiers
	}
	return nil
}

func (x *SeasonalModifier) GetGeneralModifier() float64 {
	if x != nil {
		return x.GeneralModifier
	}
	return 0
}

// ItemDatabase contains all item definitions
type ItemDatabase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*ItemDefinition      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Categories    []*ItemCategory        `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemDatabase) Reset() {
	*x = ItemDatabase{}
	mi := &file_config_game_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDatabase) ProtoMessage() {}

func (x *ItemDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDatabase.ProtoReflect.Descriptor instead.
func (*ItemDatabase) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{3}
}

func (x *ItemDatabase) GetItems() []*ItemDefinition {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ItemDatabase) GetCategories() []*ItemCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// ItemDefinition defines a single item type
type ItemDefinition struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category        string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	BasePrice       float64                `protobuf:"fixed64,5,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	PriceVolatility float64                `protobuf:"fixed64,6,opt,name=price_volatility,json=priceVolatility,proto3" json:"price_volatility,omitempty"`
	MaxStackSize    int32                  `protobuf:"varint,7,opt,name=max_stack_size,json=maxStackSize,proto3" json:"max_stack_size,omitempty"`
	// Item properties
	IsPerishable bool    `protobuf:"varint,8,opt,name=is_perishable,json=isPerishable,proto3" json:"is_perishable,omitempty"`
	SpoilageDays int32   `protobuf:"varint,9,opt,name=spoilage_days,json=spoilageDays,proto3" json:"spoilage_days,omitempty"`
	Durability   int32   `protobuf:"varint,10,opt,name=durability,proto3" json:"durability,omitempty"`
	Weight       float64 `protobuf:"fixed64,11,opt,name=weight,proto3" json:"weight,omitempty"`
	// Rarity and value
	Rarity          string  `protobuf:"bytes,12,opt,name=rarity,proto3" json:"rarity,omitempty"` // Common, Uncommon, Rare, Epic, Legendary
	ValueMultiplier float64 `protobuf:"fixed64,13,opt,name=value_multiplier,json=valueMultiplier,proto3" json:"value_multiplier,omitempty"`
	// Requirements
	RequiredRank     string   `protobuf:"bytes,14,opt,name=required_rank,json=requiredRank,proto3" json:"required_rank,omitempty"`
	RequiredFeatures []string `protobuf:"bytes,15,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	// Tags for special behavior
	Tags          []string `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemDefinition) Reset() {
	*x = ItemDefinition{}
	mi := &file_config_game_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDefinition) ProtoMessage() {}

func (x *ItemDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDefinition.ProtoReflect.Descriptor instead.
func (*ItemDefinition) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{4}
}

func (x *ItemDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ItemDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemDefinition) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ItemDefinition) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *ItemDefinition) GetPriceVolatility() float64 {
	if x != nil {
		return x.PriceVolatility
	}
	return 0
}

func (x *ItemDefinition) GetMaxStackSize() int32 {
	if x != nil {
		return x.MaxStackSize
	}
	return 0
}

func (x *ItemDefinition) GetIsPerishable() bool {
	if x != nil {
		return x.IsPerishable
	}
	return false
}

func (x *ItemDefinition) GetSpoilageDays() int32 {
	if x != nil {
		return x.SpoilageDays
	}
	return 0
}

func (x *ItemDefinition) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *ItemDefinition) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ItemDefinition) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *ItemDefinition) GetValueMultiplier() float64 {
	if x != nil {
		return x.ValueMultiplier
	}
	return 0
}

func (x *ItemDefinition) GetRequiredRank() string {
	if x != nil {
		return x.RequiredRank
	}
	return ""
}

func (x *ItemDefinition) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *ItemDefinition) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ItemCategory defines an item category
type ItemCategory struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BaseVolatility float64                `protobuf:"fixed64,4,opt,name=base_volatility,json=baseVolatility,proto3" json:"base_volatility,omitempty"`
	SpoilageRate   float64                `protobuf:"fixed64,5,opt,name=spoilage_rate,json=spoilageRate,proto3" json:"spoilage_rate,omitempty"`
	DefaultTags    []string               `protobuf:"bytes,6,rep,name=default_tags,json=defaultTags,proto3" json:"default_tags,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ItemCategory) Reset() {
	*x = ItemCategory{}
	mi := &file_config_game_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCategory) ProtoMessage() {}

func (x *ItemCategory) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCategory.ProtoReflect.Descriptor instead.
func (*ItemCategory) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{5}
}

func (x *ItemCategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ItemCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemCategory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemCategory) GetBaseVolatility() float64 {
	if x != nil {
		return x.BaseVolatility
	}
	return 0
}

func (x *ItemCategory) GetSpoilageRate() float64 {
	if x != nil {
		return x.SpoilageRate
	}
	return 0
}

func (x *ItemCategory) GetDefaultTags() []string {
	if x != nil {
		return x.DefaultTags
	}
	return nil
}

// EventConfig contains event system configuration
type EventConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*EventDefinition     `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	EventChains   []*EventChain          `protobuf:"bytes,2,rep,name=event_chains,json=eventChains,proto3" json:"event_chains,omitempty"`
	Schedule      *EventSchedule         `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventConfig) Reset() {
	*x = EventConfig{}
	mi := &file_config_game_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventConfig) ProtoMessage() {}

func (x *EventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventConfig.ProtoReflect.Descriptor instead.
func (*EventConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{6}
}

func (x *EventConfig) GetEvents() []*EventDefinition {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventConfig) GetEventChains() []*EventChain {
	if x != nil {
		return x.EventChains
	}
	return nil
}

func (x *EventConfig) GetSchedule() *EventSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// EventDefinition defines a single event type
type EventDefinition struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	EventType   string                 `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// Trigger conditions
	Trigger *EventTrigger `protobuf:"bytes,5,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Effects
	Effects []*EventEffect `protobuf:"bytes,6,rep,name=effects,proto3" json:"effects,omitempty"`
	// Requirements
	MinDay               int32    `protobuf:"varint,7,opt,name=min_day,json=minDay,proto3" json:"min_day,omitempty"`
	RequiredRank         string   `protobuf:"bytes,8,opt,name=required_rank,json=requiredRank,proto3" json:"required_rank,omitempty"`
	RequiredAchievements []string `protobuf:"bytes,9,rep,name=required_achievements,json=requiredAchievements,proto3" json:"required_achievements,omitempty"`
	// Probability and frequency
	BaseProbability float64 `protobuf:"fixed64,10,opt,name=base_probability,json=baseProbability,proto3" json:"base_probability,omitempty"`
	CooldownDays    int32   `protobuf:"varint,11,opt,name=cooldown_days,json=cooldownDays,proto3" json:"cooldown_days,omitempty"`
	IsRepeatable    bool    `protobuf:"varint,12,opt,name=is_repeatable,json=isRepeatable,proto3" json:"is_repeatable,omitempty"`
	// Duration
	DurationDays  int32 `protobuf:"varint,13,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventDefinition) Reset() {
	*x = EventDefinition{}
	mi := &file_config_game_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDefinition) ProtoMessage() {}

func (x *EventDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDefinition.ProtoReflect.Descriptor instead.
func (*EventDefinition) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{7}
}

func (x *EventDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventDefinition) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventDefinition) GetTrigger() *EventTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *EventDefinition) GetEffects() []*EventEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *EventDefinition) GetMinDay() int32 {
	if x != nil {
		return x.MinDay
	}
	return 0
}

func (x *EventDefinition) GetRequiredRank() string {
	if x != nil {
		return x.RequiredRank
	}
	return ""
}

func (x *EventDefinition) GetRequiredAchievements() []string {
	if x != nil {
		return x.RequiredAchievements
	}
	return nil
}

func (x *EventDefinition) GetBaseProbability() float64 {
	if x != nil {
		return x.BaseProbability
	}
	return 0
}

func (x *EventDefinition) GetCooldownDays() int32 {
	if x != nil {
		return x.CooldownDays
	}
	return 0
}

func (x *EventDefinition) GetIsRepeatable() bool {
	if x != nil {
		return x.IsRepeatable
	}
	return false
}

func (x *EventDefinition) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

// EventTrigger defines when an event can trigger
type EventTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TriggerType   string                 `protobuf:"bytes,1,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"` // scheduled, random, condition
	Day           int32                  `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Season        string                 `protobuf:"bytes,3,opt,name=season,proto3" json:"season,omitempty"`
	Conditions    []string               `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Probability   float64                `protobuf:"fixed64,5,opt,name=probability,proto3" json:"probability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger) Reset() {
	*x = EventTrigger{}
	mi := &file_config_game_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger) ProtoMessage() {}

func (x *EventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger.ProtoReflect.Descriptor instead.
func (*EventTrigger) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{8}
}

func (x *EventTrigger) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *EventTrigger) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *EventTrigger) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *EventTrigger) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EventTrigger) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

// EventEffect defines an effect of an event
type EventEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EffectType    string                 `protobuf:"bytes,1,opt,name=effect_type,json=effectType,proto3" json:"effect_type,omitempty"` // price_change, reputation, gold, item_spawn
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`                           // item_id, category, or "all"
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Duration      int32                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventEffect) Reset() {
	*x = EventEffect{}
	mi := &file_config_game_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEffect) ProtoMessage() {}

func (x *EventEffect) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEffect.ProtoReflect.Descriptor instead.
func (*EventEffect) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{9}
}

func (x *EventEffect) GetEffectType() string {
	if x != nil {
		return x.EffectType
	}
	return ""
}

func (x *EventEffect) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *EventEffect) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EventEffect) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EventEffect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// EventChain defines a sequence of related events
type EventChain struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ChainId        string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EventIds       []string               `protobuf:"bytes,3,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	Sequential     bool                   `protobuf:"varint,4,opt,name=sequential,proto3" json:"sequential,omitempty"`
	MinDaysBetween int32                  `protobuf:"varint,5,opt,name=min_days_between,json=minDaysBetween,proto3" json:"min_days_between,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventChain) Reset() {
	*x = EventChain{}
	mi := &file_config_game_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChain) ProtoMessage() {}

func (x *EventChain) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChain.ProtoReflect.Descriptor instead.
func (*EventChain) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{10}
}

func (x *EventChain) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *EventChain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventChain) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *EventChain) GetSequential() bool {
	if x != nil {
		return x.Sequential
	}
	return false
}

func (x *EventChain) GetMinDaysBetween() int32 {
	if x != nil {
		return x.MinDaysBetween
	}
	return 0
}

// EventSchedule defines the event scheduling rules
type EventSchedule struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DailyEvents    []string               `protobuf:"bytes,1,rep,name=daily_events,json=dailyEvents,proto3" json:"daily_events,omitempty"`
	WeeklyEvents   []string               `protobuf:"bytes,2,rep,name=weekly_events,json=weeklyEvents,proto3" json:"weekly_events,omitempty"`
	SeasonalEvents []string               `protobuf:"bytes,3,rep,name=seasonal_events,json=seasonalEvents,proto3" json:"seasonal_events,omitempty"`
	SpecialEvents  []string               `protobuf:"bytes,4,rep,name=special_events,json=specialEvents,proto3" json:"special_events,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventSchedule) Reset() {
	*x = EventSchedule{}
	mi := &file_config_game_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSchedule) ProtoMessage() {}

func (x *EventSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSchedule.ProtoReflect.Descriptor instead.
func (*EventSchedule) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{11}
}

func (x *EventSchedule) GetDailyEvents() []string {
	if x != nil {
		return x.DailyEvents
	}
	return nil
}

func (x *EventSchedule) GetWeeklyEvents() []string {
	if x != nil {
		return x.WeeklyEvents
	}
	return nil
}

func (x *EventSchedule) GetSeasonalEvents() []string {
	if x != nil {
		return x.SeasonalEvents
	}
	return nil
}

func (x *EventSchedule) GetSpecialEvents() []string {
	if x != nil {
		return x.SpecialEvents
	}
	return nil
}

// ProgressionConfig contains progression system parameters
type ProgressionConfig struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Ranks         []*RankDefinition        `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Achievements  []*AchievementDefinition `protobuf:"bytes,2,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Features      []*FeatureDefinition     `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	Experience    *ExperienceConfig        `protobuf:"bytes,4,opt,name=experience,proto3" json:"experience,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProgressionConfig) Reset() {
	*x = ProgressionConfig{}
	mi := &file_config_game_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProgressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressionConfig) ProtoMessage() {}

func (x *ProgressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressionConfig.ProtoReflect.Descriptor instead.
func (*ProgressionConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{12}
}

func (x *ProgressionConfig) GetRanks() []*RankDefinition {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *ProgressionConfig) GetAchievements() []*AchievementDefinition {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *ProgressionConfig) GetFeatures() []*FeatureDefinition {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ProgressionConfig) GetExperience() *ExperienceConfig {
	if x != nil {
		return x.Experience
	}
	return nil
}

// RankDefinition defines a merchant rank
type RankDefinition struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RequiredExperience int32                  `protobuf:"varint,4,opt,name=required_experience,json=requiredExperience,proto3" json:"required_experience,omitempty"`
	RequiredGold       float64                `protobuf:"fixed64,5,opt,name=required_gold,json=requiredGold,proto3" json:"required_gold,omitempty"`
	RequiredReputation int32                  `protobuf:"varint,6,opt,name=required_reputation,json=requiredReputation,proto3" json:"required_reputation,omitempty"`
	// Rank benefits
	ShopCapacity         int32   `protobuf:"varint,7,opt,name=shop_capacity,json=shopCapacity,proto3" json:"shop_capacity,omitempty"`
	WarehouseCapacity    int32   `protobuf:"varint,8,opt,name=warehouse_capacity,json=warehouseCapacity,proto3" json:"warehouse_capacity,omitempty"`
	PriceDiscount        float64 `protobuf:"fixed64,9,opt,name=price_discount,json=priceDiscount,proto3" json:"price_discount,omitempty"`
	ReputationMultiplier float64 `protobuf:"fixed64,10,opt,name=reputation_multiplier,json=reputationMultiplier,proto3" json:"reputation_multiplier,omitempty"`
	// Unlocked features
	UnlockedFeatures []string `protobuf:"bytes,11,rep,name=unlocked_features,json=unlockedFeatures,proto3" json:"unlocked_features,omitempty"`
	UnlockedItems    []string `protobuf:"bytes,12,rep,name=unlocked_items,json=unlockedItems,proto3" json:"unlocked_items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RankDefinition) Reset() {
	*x = RankDefinition{}
	mi := &file_config_game_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankDefinition) ProtoMessage() {}

func (x *RankDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankDefinition.ProtoReflect.Descriptor instead.
func (*RankDefinition) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{13}
}

func (x *RankDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RankDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RankDefinition) GetRequiredExperience() int32 {
	if x != nil {
		return x.RequiredExperience
	}
	return 0
}

func (x *RankDefinition) GetRequiredGold() float64 {
	if x != nil {
		return x.RequiredGold
	}
	return 0
}

func (x *RankDefinition) GetRequiredReputation() int32 {
	if x != nil {
		return x.RequiredReputation
	}
	return 0
}

func (x *RankDefinition) GetShopCapacity() int32 {
	if x != nil {
		return x.ShopCapacity
	}
	return 0
}

func (x *RankDefinition) GetWarehouseCapacity() int32 {
	if x != nil {
		return x.WarehouseCapacity
	}
	return 0
}

func (x *RankDefinition) GetPriceDiscount() float64 {
	if x != nil {
		return x.PriceDiscount
	}
	return 0
}

func (x *RankDefinition) GetReputationMultiplier() float64 {
	if x != nil {
		return x.ReputationMultiplier
	}
	return 0
}

func (x *RankDefinition) GetUnlockedFeatures() []string {
	if x != nil {
		return x.UnlockedFeatures
	}
	return nil
}

func (x *RankDefinition) GetUnlockedItems() []string {
	if x != nil {
		return x.UnlockedItems
	}
	return nil
}

// AchievementDefinition defines an achievement
type AchievementDefinition struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category    string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Points      int32                  `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	// Completion criteria
	Criteria *AchievementCriteria `protobuf:"bytes,6,opt,name=criteria,proto3" json:"criteria,omitempty"`
	// Rewards
	Rewards []*AchievementReward `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	// Display
	Icon          string `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	Hidden        bool   `protobuf:"varint,9,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AchievementDefinition) Reset() {
	*x = AchievementDefinition{}
	mi := &file_config_game_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AchievementDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementDefinition) ProtoMessage() {}

func (x *AchievementDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementDefinition.ProtoReflect.Descriptor instead.
func (*AchievementDefinition) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{14}
}

func (x *AchievementDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AchievementDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AchievementDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AchievementDefinition) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AchievementDefinition) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *AchievementDefinition) GetCriteria() *AchievementCriteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *AchievementDefinition) GetRewards() []*AchievementReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AchievementDefinition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AchievementDefinition) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

// AchievementCriteria defines how to complete an achievement
type AchievementCriteria struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CriteriaType  string                 `protobuf:"bytes,1,opt,name=criteria_type,json=criteriaType,proto3" json:"criteria_type,omitempty"` // count, threshold, event
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Conditions    []string               `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AchievementCriteria) Reset() {
	*x = AchievementCriteria{}
	mi := &file_config_game_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AchievementCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementCriteria) ProtoMessage() {}

func (x *AchievementCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementCriteria.ProtoReflect.Descriptor instead.
func (*AchievementCriteria) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{15}
}

func (x *AchievementCriteria) GetCriteriaType() string {
	if x != nil {
		return x.CriteriaType
	}
	return ""
}

func (x *AchievementCriteria) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AchievementCriteria) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AchievementCriteria) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// AchievementReward defines a reward for completing an achievement
type AchievementReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardType    string                 `protobuf:"bytes,1,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"` // gold, experience, item, feature
	RewardId      string                 `protobuf:"bytes,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AchievementReward) Reset() {
	*x = AchievementReward{}
	mi := &file_config_game_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AchievementReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementReward) ProtoMessage() {}

func (x *AchievementReward) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementReward.ProtoReflect.Descriptor instead.
func (*AchievementReward) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{16}
}

func (x *AchievementReward) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (x *AchievementReward) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *AchievementReward) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// FeatureDefinition defines an unlockable feature
type FeatureDefinition struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FeatureType string                 `protobuf:"bytes,4,opt,name=feature_type,json=featureType,proto3" json:"feature_type,omitempty"`
	// Unlock requirements
	RequiredRank         string   `protobuf:"bytes,5,opt,name=required_rank,json=requiredRank,proto3" json:"required_rank,omitempty"`
	RequiredAchievements []string `protobuf:"bytes,6,rep,name=required_achievements,json=requiredAchievements,proto3" json:"required_achievements,omitempty"`
	RequiredGold         float64  `protobuf:"fixed64,7,opt,name=required_gold,json=requiredGold,proto3" json:"required_gold,omitempty"`
	// Feature data
	Parameters    map[string]string `protobuf:"bytes,8,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureDefinition) Reset() {
	*x = FeatureDefinition{}
	mi := &file_config_game_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinition) ProtoMessage() {}

func (x *FeatureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinition.ProtoReflect.Descriptor instead.
func (*FeatureDefinition) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{17}
}

func (x *FeatureDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureDefinition) GetFeatureType() string {
	if x != nil {
		return x.FeatureType
	}
	return ""
}

func (x *FeatureDefinition) GetRequiredRank() string {
	if x != nil {
		return x.RequiredRank
	}
	return ""
}

func (x *FeatureDefinition) GetRequiredAchievements() []string {
	if x != nil {
		return x.RequiredAchievements
	}
	return nil
}

func (x *FeatureDefinition) GetRequiredGold() float64 {
	if x != nil {
		return x.RequiredGold
	}
	return 0
}

func (x *FeatureDefinition) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// ExperienceConfig contains experience system parameters
type ExperienceConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BaseExperienceRate float64                `protobuf:"fixed64,1,opt,name=base_experience_rate,json=baseExperienceRate,proto3" json:"base_experience_rate,omitempty"`
	ActionExperience   map[string]float64     `protobuf:"bytes,2,rep,name=action_experience,json=actionExperience,proto3" json:"action_experience,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	LevelScalingFactor float64                `protobuf:"fixed64,3,opt,name=level_scaling_factor,json=levelScalingFactor,proto3" json:"level_scaling_factor,omitempty"`
	MaxDailyExperience int32                  `protobuf:"varint,4,opt,name=max_daily_experience,json=maxDailyExperience,proto3" json:"max_daily_experience,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExperienceConfig) Reset() {
	*x = ExperienceConfig{}
	mi := &file_config_game_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExperienceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperienceConfig) ProtoMessage() {}

func (x *ExperienceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperienceConfig.ProtoReflect.Descriptor instead.
func (*ExperienceConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{18}
}

func (x *ExperienceConfig) GetBaseExperienceRate() float64 {
	if x != nil {
		return x.BaseExperienceRate
	}
	return 0
}

func (x *ExperienceConfig) GetActionExperience() map[string]float64 {
	if x != nil {
		return x.ActionExperience
	}
	return nil
}

func (x *ExperienceConfig) GetLevelScalingFactor() float64 {
	if x != nil {
		return x.LevelScalingFactor
	}
	return 0
}

func (x *ExperienceConfig) GetMaxDailyExperience() int32 {
	if x != nil {
		return x.MaxDailyExperience
	}
	return 0
}

// DifficultyConfig contains difficulty settings
type DifficultyConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DifficultyLevel string                 `protobuf:"bytes,1,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"` // Easy, Normal, Hard, Expert
	// Economic modifiers
	StartingGold            float64 `protobuf:"fixed64,2,opt,name=starting_gold,json=startingGold,proto3" json:"starting_gold,omitempty"`
	PriceVolatilityModifier float64 `protobuf:"fixed64,3,opt,name=price_volatility_modifier,json=priceVolatilityModifier,proto3" json:"price_volatility_modifier,omitempty"`
	ProfitMarginModifier    float64 `protobuf:"fixed64,4,opt,name=profit_margin_modifier,json=profitMarginModifier,proto3" json:"profit_margin_modifier,omitempty"`
	MerchantAiIntelligence  float64 `protobuf:"fixed64,5,opt,name=merchant_ai_intelligence,json=merchantAiIntelligence,proto3" json:"merchant_ai_intelligence,omitempty"`
	// Progression modifiers
	ExperienceRateModifier   float64 `protobuf:"fixed64,6,opt,name=experience_rate_modifier,json=experienceRateModifier,proto3" json:"experience_rate_modifier,omitempty"`
	ReputationGainModifier   float64 `protobuf:"fixed64,7,opt,name=reputation_gain_modifier,json=reputationGainModifier,proto3" json:"reputation_gain_modifier,omitempty"`
	AchievementPointModifier float64 `protobuf:"fixed64,8,opt,name=achievement_point_modifier,json=achievementPointModifier,proto3" json:"achievement_point_modifier,omitempty"`
	// Event modifiers
	EventFrequencyModifier   float64 `protobuf:"fixed64,9,opt,name=event_frequency_modifier,json=eventFrequencyModifier,proto3" json:"event_frequency_modifier,omitempty"`
	NegativeEventProbability float64 `protobuf:"fixed64,10,opt,name=negative_event_probability,json=negativeEventProbability,proto3" json:"negative_event_probability,omitempty"`
	EventImpactModifier      float64 `protobuf:"fixed64,11,opt,name=event_impact_modifier,json=eventImpactModifier,proto3" json:"event_impact_modifier,omitempty"`
	// Resource modifiers
	StartingShopCapacity      int32   `protobuf:"varint,12,opt,name=starting_shop_capacity,json=startingShopCapacity,proto3" json:"starting_shop_capacity,omitempty"`
	StartingWarehouseCapacity int32   `protobuf:"varint,13,opt,name=starting_warehouse_capacity,json=startingWarehouseCapacity,proto3" json:"starting_warehouse_capacity,omitempty"`
	SpoilageRateModifier      float64 `protobuf:"fixed64,14,opt,name=spoilage_rate_modifier,json=spoilageRateModifier,proto3" json:"spoilage_rate_modifier,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DifficultyConfig) Reset() {
	*x = DifficultyConfig{}
	mi := &file_config_game_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DifficultyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DifficultyConfig) ProtoMessage() {}

func (x *DifficultyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_game_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DifficultyConfig.ProtoReflect.Descriptor instead.
func (*DifficultyConfig) Descriptor() ([]byte, []int) {
	return file_config_game_config_proto_rawDescGZIP(), []int{19}
}

func (x *DifficultyConfig) GetDifficultyLevel() string {
	if x != nil {
		return x.DifficultyLevel
	}
	return ""
}

func (x *DifficultyConfig) GetStartingGold() float64 {
	if x != nil {
		return x.StartingGold
	}
	return 0
}

func (x *DifficultyConfig) GetPriceVolatilityModifier() float64 {
	if x != nil {
		return x.PriceVolatilityModifier
	}
	return 0
}

func (x *DifficultyConfig) GetProfitMarginModifier() float64 {
	if x != nil {
		return x.ProfitMarginModifier
	}
	return 0
}

func (x *DifficultyConfig) GetMerchantAiIntelligence() float64 {
	if x != nil {
		return x.MerchantAiIntelligence
	}
	return 0
}

func (x *DifficultyConfig) GetExperienceRateModifier() float64 {
	if x != nil {
		return x.ExperienceRateModifier
	}
	return 0
}

func (x *DifficultyConfig) GetReputationGainModifier() float64 {
	if x != nil {
		return x.ReputationGainModifier
	}
	return 0
}

func (x *DifficultyConfig) GetAchievementPointModifier() float64 {
	if x != nil {
		return x.AchievementPointModifier
	}
	return 0
}

func (x *DifficultyConfig) GetEventFrequencyModifier() float64 {
	if x != nil {
		return x.EventFrequencyModifier
	}
	return 0
}

func (x *DifficultyConfig) GetNegativeEventProbability() float64 {
	if x != nil {
		return x.NegativeEventProbability
	}
	return 0
}

func (x *DifficultyConfig) GetEventImpactModifier() float64 {
	if x != nil {
		return x.EventImpactModifier
	}
	return 0
}

func (x *DifficultyConfig) GetStartingShopCapacity() int32 {
	if x != nil {
		return x.StartingShopCapacity
	}
	return 0
}

func (x *DifficultyConfig) GetStartingWarehouseCapacity() int32 {
	if x != nil {
		return x.StartingWarehouseCapacity
	}
	return 0
}

func (x *DifficultyConfig) GetSpoilageRateModifier() float64 {
	if x != nil {
		return x.SpoilageRateModifier
	}
	return 0
}

var File_config_game_config_proto protoreflect.FileDescriptor

const file_config_game_config_proto_rawDesc = "" +
	"\n" +
	"\x18config/game_config.proto\x12\x06config\"\xa7\x02\n" +
	"\n" +
	"GameConfig\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12/\n" +
	"\aeconomy\x18\x02 \x01(\v2\x15.config.EconomyConfigR\aeconomy\x12*\n" +
	"\x05items\x18\x03 \x01(\v2\x14.config.ItemDatabaseR\x05items\x12+\n" +
	"\x06events\x18\x04 \x01(\v2\x13.config.EventConfigR\x06events\x12;\n" +
	"\vprogression\x18\x05 \x01(\v2\x19.config.ProgressionConfigR\vprogression\x128\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\v2\x18.config.DifficultyConfigR\n" +
	"difficulty\"\xe5\x05\n" +
	"\rEconomyConfig\x12.\n" +
	"\x13base_inflation_rate\x18\x01 \x01(\x01R\x11baseInflationRate\x120\n" +
	"\x14max_price_volatility\x18\x02 \x01(\x01R\x12maxPriceVolatility\x126\n" +
	"\x17seasonal_price_modifier\x18\x03 \x01(\x01R\x15seasonalPriceModifier\x120\n" +
	"\x14event_price_modifier\x18\x04 \x01(\x01R\x12eventPriceModifier\x12:\n" +
	"\x19supply_demand_sensitivity\x18\x05 \x01(\x01R\x17supplyDemandSensitivity\x12:\n" +
	"\x19merchant_influence_factor\x18\x06 \x01(\x01R\x17merchantInfluenceFactor\x12,\n" +
	"\x12price_history_days\x18\a \x01(\x05R\x10priceHistoryDays\x12[\n" +
	"\x12seasonal_modifiers\x18\b \x03(\v2,.config.EconomyConfig.SeasonalModifiersEntryR\x11seasonalModifiers\x12^\n" +
	"\x13category_volatility\x18\t \x03(\v2-.config.EconomyConfig.CategoryVolatilityEntryR\x12categoryVolatility\x1a^\n" +
	"\x16SeasonalModifiersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.config.SeasonalModifierR\x05value:\x028\x01\x1aE\n" +
	"\x17CategoryVolatilityEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\xf4\x01\n" +
	"\x10SeasonalModifier\x12\x1f\n" +
	"\vseason_name\x18\x01 \x01(\tR\n" +
	"seasonName\x12R\n" +
	"\x0eitem_modifiers\x18\x02 \x03(\v2+.config.SeasonalModifier.ItemModifiersEntryR\ritemModifiers\x12)\n" +
	"\x10general_modifier\x18\x03 \x01(\x01R\x0fgeneralModifier\x1a@\n" +
	"\x12ItemModifiersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"r\n" +
	"\fItemDatabase\x12,\n" +
	"\x05items\x18\x01 \x03(\v2\x16.config.ItemDefinitionR\x05items\x124\n" +
	"\n" +
	"categories\x18\x02 \x03(\v2\x14.config.ItemCategoryR\n" +
	"categories\"\x8d\x04\n" +
	"\x0eItemDefinition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x1d\n" +
	"\n" +
	"base_price\x18\x05 \x01(\x01R\tbasePrice\x12)\n" +
	"\x10price_volatility\x18\x06 \x01(\x01R\x0fpriceVolatility\x12$\n" +
	"\x0emax_stack_size\x18\a \x01(\x05R\fmaxStackSize\x12#\n" +
	"\ris_perishable\x18\b \x01(\bR\fisPerishable\x12#\n" +
	"\rspoilage_days\x18\t \x01(\x05R\fspoilageDays\x12\x1e\n" +
	"\n" +
	"durability\x18\n" +
	" \x01(\x05R\n" +
	"durability\x12\x16\n" +
	"\x06weight\x18\v \x01(\x01R\x06weight\x12\x16\n" +
	"\x06rarity\x18\f \x01(\tR\x06rarity\x12)\n" +
	"\x10value_multiplier\x18\r \x01(\x01R\x0fvalueMultiplier\x12#\n" +
	"\rrequired_rank\x18\x0e \x01(\tR\frequiredRank\x12+\n" +
	"\x11required_features\x18\x0f \x03(\tR\x10requiredFeatures\x12\x12\n" +
	"\x04tags\x18\x10 \x03(\tR\x04tags\"\xc5\x01\n" +
	"\fItemCategory\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x0fbase_volatility\x18\x04 \x01(\x01R\x0ebaseVolatility\x12#\n" +
	"\rspoilage_rate\x18\x05 \x01(\x01R\fspoilageRate\x12!\n" +
	"\fdefault_tags\x18\x06 \x03(\tR\vdefaultTags\"\xa8\x01\n" +
	"\vEventConfig\x12/\n" +
	"\x06events\x18\x01 \x03(\v2\x17.config.EventDefinitionR\x06events\x125\n" +
	"\fevent_chains\x18\x02 \x03(\v2\x12.config.EventChainR\veventChains\x121\n" +
	"\bschedule\x18\x03 \x01(\v2\x15.config.EventScheduleR\bschedule\"\xe2\x03\n" +
	"\x0fEventDefinition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"event_type\x18\x04 \x01(\tR\teventType\x12.\n" +
	"\atrigger\x18\x05 \x01(\v2\x14.config.EventTriggerR\atrigger\x12-\n" +
	"\aeffects\x18\x06 \x03(\v2\x13.config.EventEffectR\aeffects\x12\x17\n" +
	"\amin_day\x18\a \x01(\x05R\x06minDay\x12#\n" +
	"\rrequired_rank\x18\b \x01(\tR\frequiredRank\x123\n" +
	"\x15required_achievements\x18\t \x03(\tR\x14requiredAchievements\x12)\n" +
	"\x10base_probability\x18\n" +
	" \x01(\x01R\x0fbaseProbability\x12#\n" +
	"\rcooldown_days\x18\v \x01(\x05R\fcooldownDays\x12#\n" +
	"\ris_repeatable\x18\f \x01(\bR\fisRepeatable\x12#\n" +
	"\rduration_days\x18\r \x01(\x05R\fdurationDays\"\x9d\x01\n" +
	"\fEventTrigger\x12!\n" +
	"\ftrigger_type\x18\x01 \x01(\tR\vtriggerType\x12\x10\n" +
	"\x03day\x18\x02 \x01(\x05R\x03day\x12\x16\n" +
	"\x06season\x18\x03 \x01(\tR\x06season\x12\x1e\n" +
	"\n" +
	"conditions\x18\x04 \x03(\tR\n" +
	"conditions\x12 \n" +
	"\vprobability\x18\x05 \x01(\x01R\vprobability\"\x9a\x01\n" +
	"\vEventEffect\x12\x1f\n" +
	"\veffect_type\x18\x01 \x01(\tR\n" +
	"effectType\x12\x16\n" +
	"\x06target\x18\x02 \x01(\tR\x06target\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x05R\bduration\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\"\xa2\x01\n" +
	"\n" +
	"EventChain\x12\x19\n" +
	"\bchain_id\x18\x01 \x01(\tR\achainId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tevent_ids\x18\x03 \x03(\tR\beventIds\x12\x1e\n" +
	"\n" +
	"sequential\x18\x04 \x01(\bR\n" +
	"sequential\x12(\n" +
	"\x10min_days_between\x18\x05 \x01(\x05R\x0eminDaysBetween\"\xa7\x01\n" +
	"\rEventSchedule\x12!\n" +
	"\fdaily_events\x18\x01 \x03(\tR\vdailyEvents\x12#\n" +
	"\rweekly_events\x18\x02 \x03(\tR\fweeklyEvents\x12'\n" +
	"\x0fseasonal_events\x18\x03 \x03(\tR\x0eseasonalEvents\x12%\n" +
	"\x0especial_events\x18\x04 \x03(\tR\rspecialEvents\"\xf5\x01\n" +
	"\x11ProgressionConfig\x12,\n" +
	"\x05ranks\x18\x01 \x03(\v2\x16.config.RankDefinitionR\x05ranks\x12A\n" +
	"\fachievements\x18\x02 \x03(\v2\x1d.config.AchievementDefinitionR\fachievements\x125\n" +
	"\bfeatures\x18\x03 \x03(\v2\x19.config.FeatureDefinitionR\bfeatures\x128\n" +
	"\n" +
	"experience\x18\x04 \x01(\v2\x18.config.ExperienceConfigR\n" +
	"experience\"\xe1\x03\n" +
	"\x0eRankDefinition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12/\n" +
	"\x13required_experience\x18\x04 \x01(\x05R\x12requiredExperience\x12#\n" +
	"\rrequired_gold\x18\x05 \x01(\x01R\frequiredGold\x12/\n" +
	"\x13required_reputation\x18\x06 \x01(\x05R\x12requiredReputation\x12#\n" +
	"\rshop_capacity\x18\a \x01(\x05R\fshopCapacity\x12-\n" +
	"\x12warehouse_capacity\x18\b \x01(\x05R\x11warehouseCapacity\x12%\n" +
	"\x0eprice_discount\x18\t \x01(\x01R\rpriceDiscount\x123\n" +
	"\x15reputation_multiplier\x18\n" +
	" \x01(\x01R\x14reputationMultiplier\x12+\n" +
	"\x11unlocked_features\x18\v \x03(\tR\x10unlockedFeatures\x12%\n" +
	"\x0eunlocked_items\x18\f \x03(\tR\runlockedItems\"\xab\x02\n" +
	"\x15AchievementDefinition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x16\n" +
	"\x06points\x18\x05 \x01(\x05R\x06points\x127\n" +
	"\bcriteria\x18\x06 \x01(\v2\x1b.config.AchievementCriteriaR\bcriteria\x123\n" +
	"\arewards\x18\a \x03(\v2\x19.config.AchievementRewardR\arewards\x12\x12\n" +
	"\x04icon\x18\b \x01(\tR\x04icon\x12\x16\n" +
	"\x06hidden\x18\t \x01(\bR\x06hidden\"\x88\x01\n" +
	"\x13AchievementCriteria\x12#\n" +
	"\rcriteria_type\x18\x01 \x01(\tR\fcriteriaType\x12\x16\n" +
	"\x06target\x18\x02 \x01(\tR\x06target\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x12\x1e\n" +
	"\n" +
	"conditions\x18\x04 \x03(\tR\n" +
	"conditions\"g\n" +
	"\x11AchievementReward\x12\x1f\n" +
	"\vreward_type\x18\x01 \x01(\tR\n" +
	"rewardType\x12\x1b\n" +
	"\treward_id\x18\x02 \x01(\tR\brewardId\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\"\x85\x03\n" +
	"\x11FeatureDefinition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12!\n" +
	"\ffeature_type\x18\x04 \x01(\tR\vfeatureType\x12#\n" +
	"\rrequired_rank\x18\x05 \x01(\tR\frequiredRank\x123\n" +
	"\x15required_achievements\x18\x06 \x03(\tR\x14requiredAchievements\x12#\n" +
	"\rrequired_gold\x18\a \x01(\x01R\frequiredGold\x12I\n" +
	"\n" +
	"parameters\x18\b \x03(\v2).config.FeatureDefinition.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xca\x02\n" +
	"\x10ExperienceConfig\x120\n" +
	"\x14base_experience_rate\x18\x01 \x01(\x01R\x12baseExperienceRate\x12[\n" +
	"\x11action_experience\x18\x02 \x03(\v2..config.ExperienceConfig.ActionExperienceEntryR\x10actionExperience\x120\n" +
	"\x14level_scaling_factor\x18\x03 \x01(\x01R\x12levelScalingFactor\x120\n" +
	"\x14max_daily_experience\x18\x04 \x01(\x05R\x12maxDailyExperience\x1aC\n" +
	"\x15ActionExperienceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\x98\x06\n" +
	"\x10DifficultyConfig\x12)\n" +
	"\x10difficulty_level\x18\x01 \x01(\tR\x0fdifficultyLevel\x12#\n" +
	"\rstarting_gold\x18\x02 \x01(\x01R\fstartingGold\x12:\n" +
	"\x19price_volatility_modifier\x18\x03 \x01(\x01R\x17priceVolatilityModifier\x124\n" +
	"\x16profit_margin_modifier\x18\x04 \x01(\x01R\x14profitMarginModifier\x128\n" +
	"\x18merchant_ai_intelligence\x18\x05 \x01(\x01R\x16merchantAiIntelligence\x128\n" +
	"\x18experience_rate_modifier\x18\x06 \x01(\x01R\x16experienceRateModifier\x128\n" +
	"\x18reputation_gain_modifier\x18\a \x01(\x01R\x16reputationGainModifier\x12<\n" +
	"\x1aachievement_point_modifier\x18\b \x01(\x01R\x18achievementPointModifier\x128\n" +
	"\x18event_frequency_modifier\x18\t \x01(\x01R\x16eventFrequencyModifier\x12<\n" +
	"\x1anegative_event_probability\x18\n" +
	" \x01(\x01R\x18negativeEventProbability\x122\n" +
	"\x15event_impact_modifier\x18\v \x01(\x01R\x13eventImpactModifier\x124\n" +
	"\x16starting_shop_capacity\x18\f \x01(\x05R\x14startingShopCapacity\x12>\n" +
	"\x1bstarting_warehouse_capacity\x18\r \x01(\x05R\x19startingWarehouseCapacity\x124\n" +
	"\x16spoilage_rate_modifier\x18\x0e \x01(\x01R\x14spoilageRateModifierBAZ?github.com/yourusername/merchant-tails/game/internal/gen/configb\x06proto3"

var (
	file_config_game_config_proto_rawDescOnce sync.Once
	file_config_game_config_proto_rawDescData []byte
)

func file_config_game_config_proto_rawDescGZIP() []byte {
	file_config_game_config_proto_rawDescOnce.Do(func() {
		file_config_game_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_game_config_proto_rawDesc), len(file_config_game_config_proto_rawDesc)))
	})
	return file_config_game_config_proto_rawDescData
}

var file_config_game_config_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_config_game_config_proto_goTypes = []any{
	(*GameConfig)(nil),            // 0: config.GameConfig
	(*EconomyConfig)(nil),         // 1: config.EconomyConfig
	(*SeasonalModifier)(nil),      // 2: config.SeasonalModifier
	(*ItemDatabase)(nil),          // 3: config.ItemDatabase
	(*ItemDefinition)(nil),        // 4: config.ItemDefinition
	(*ItemCategory)(nil),          // 5: config.ItemCategory
	(*EventConfig)(nil),           // 6: config.EventConfig
	(*EventDefinition)(nil),       // 7: config.EventDefinition
	(*EventTrigger)(nil),          // 8: config.EventTrigger
	(*EventEffect)(nil),           // 9: config.EventEffect
	(*EventChain)(nil),            // 10: config.EventChain
	(*EventSchedule)(nil),         // 11: config.EventSchedule
	(*ProgressionConfig)(nil),     // 12: config.ProgressionConfig
	(*RankDefinition)(nil),        // 13: config.RankDefinition
	(*AchievementDefinition)(nil), // 14: config.AchievementDefinition
	(*AchievementCriteria)(nil),   // 15: config.AchievementCriteria
	(*AchievementReward)(nil),     // 16: config.AchievementReward
	(*FeatureDefinition)(nil),     // 17: config.FeatureDefinition
	(*ExperienceConfig)(nil),      // 18: config.ExperienceConfig
	(*DifficultyConfig)(nil),      // 19: config.DifficultyConfig
	nil,                           // 20: config.EconomyConfig.SeasonalModifiersEntry
	nil,                           // 21: config.EconomyConfig.CategoryVolatilityEntry
	nil,                           // 22: config.SeasonalModifier.ItemModifiersEntry
	nil,                           // 23: config.FeatureDefinition.ParametersEntry
	nil,                           // 24: config.ExperienceConfig.ActionExperienceEntry
}
var file_config_game_config_proto_depIdxs = []int32{
	1,  // 0: config.GameConfig.economy:type_name -> config.EconomyConfig
	3,  // 1: config.GameConfig.items:type_name -> config.ItemDatabase
	6,  // 2: config.GameConfig.events:type_name -> config.EventConfig
	12, // 3: config.GameConfig.progression:type_name -> config.ProgressionConfig
	19, // 4: config.GameConfig.difficulty:type_name -> config.DifficultyConfig
	20, // 5: config.EconomyConfig.seasonal_modifiers:type_name -> config.EconomyConfig.SeasonalModifiersEntry
	21, // 6: config.EconomyConfig.category_volatility:type_name -> config.EconomyConfig.CategoryVolatilityEntry
	22, // 7: config.SeasonalModifier.item_modifiers:type_name -> config.SeasonalModifier.ItemModifiersEntry
	4,  // 8: config.ItemDatabase.items:type_name -> config.ItemDefinition
	5,  // 9: config.ItemDatabase.categories:type_name -> config.ItemCategory
	7,  // 10: config.EventConfig.events:type_name -> config.EventDefinition
	10, // 11: config.EventConfig.event_chains:type_name -> config.EventChain
	11, // 12: config.EventConfig.schedule:type_name -> config.EventSchedule
	8,  // 13: config.EventDefinition.trigger:type_name -> config.EventTrigger
	9,  // 14: config.EventDefinition.effects:type_name -> config.EventEffect
	13, // 15: config.ProgressionConfig.ranks:type_name -> config.RankDefinition
	14, // 16: config.ProgressionConfig.achievements:type_name -> config.AchievementDefinition
	17, // 17: config.ProgressionConfig.features:type_name -> config.FeatureDefinition
	18, // 18: config.ProgressionConfig.experience:type_name -> config.ExperienceConfig
	15, // 19: config.AchievementDefinition.criteria:type_name -> config.AchievementCriteria
	16, // 20: config.AchievementDefinition.rewards:type_name -> config.AchievementReward
	23, // 21: config.FeatureDefinition.parameters:type_name -> config.FeatureDefinition.ParametersEntry
	24, // 22: config.ExperienceConfig.action_experience:type_name -> config.ExperienceConfig.ActionExperienceEntry
	2,  // 23: config.EconomyConfig.SeasonalModifiersEntry.value:type_name -> config.SeasonalModifier
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_config_game_config_proto_init() }
func file_config_game_config_proto_init() {
	if File_config_game_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_game_config_proto_rawDesc), len(file_config_game_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_game_config_proto_goTypes,
		DependencyIndexes: file_config_game_config_proto_depIdxs,
		MessageInfos:      file_config_game_config_proto_msgTypes,
	}.Build()
	File_config_game_config_proto = out.File
	file_config_game_config_proto_goTypes = nil
	file_config_game_config_proto_depIdxs = nil
}
