name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: "1.24"
  GODOT_VERSION: "4.4.1"
  PROTOC_VERSION: "25.1"

jobs:
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache golangci-lint
        id: cache-golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/go/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint-v2.3.1

      - name: Install golangci-lint
        if: steps.cache-golangci-lint.outputs.cache-hit != 'true'
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ~/go/bin v2.3.1

      - name: Install dependencies
        run: |
          cd game
          go mod download

      - name: Cache lint results
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-cache-${{ hashFiles('game/**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-cache-

      - name: Run golangci-lint
        run: |
          cd game
          ~/go/bin/golangci-lint run

  go-test:
    name: Go Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-test
            game/.test-cache
          key: ${{ runner.os }}-go-test-${{ hashFiles('game/**/*.go', 'game/**/*_test.go') }}
          restore-keys: |
            ${{ runner.os }}-go-test-

      - name: Install dependencies
        run: |
          cd game
          go mod download

      - name: Cache protoc-gen-go
        id: cache-protoc-gen-go
        uses: actions/cache@v4
        with:
          path: ~/go/bin/protoc-gen-go
          key: ${{ runner.os }}-protoc-gen-go-latest

      - name: Install protoc-gen-go
        if: steps.cache-protoc-gen-go.outputs.cache-hit != 'true'
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      - name: Run tests
        run: |
          cd game
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./game/coverage.out
          flags: unittests
          name: codecov-umbrella

  godot-build:
    name: Godot Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Godot installation
        id: cache-godot
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/godot
            ~/.config/godot
            ~/godot
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          use-dotnet: false

      - name: Set up Go for GDExtension
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules and build
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-godot-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-godot-

      - name: Cache Godot project
        uses: actions/cache@v4
        with:
          path: |
            godot/.godot
            godot/.import
            godot/build
          key: ${{ runner.os }}-godot-project-${{ hashFiles('godot/**/*.tscn', 'godot/**/*.tres', 'godot/project.godot') }}
          restore-keys: |
            ${{ runner.os }}-godot-project-

      - name: Cache Protocol Buffers
        id: cache-protobuf
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/protoc
          key: ${{ runner.os }}-protobuf-${{ env.PROTOC_VERSION }}

      - name: Install Protocol Buffers
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Build GDExtension
        run: |
          if [ -f "Makefile" ]; then
            make build-go
          else
            echo "Makefile not found, skipping GDExtension build"
          fi

      - name: Import Godot project
        run: |
          if [ -f "godot/project.godot" ]; then
            godot --headless --quit --editor godot/project.godot
          else
            echo "Godot project not found, skipping import"
          fi

      - name: Run Godot tests
        run: |
          if [ -f "godot/project.godot" ]; then
            godot --headless --quit-after 60 --path godot --test
          else
            echo "Godot project not found, skipping tests"
          fi

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          cd game
          go test -bench=. -benchmem ./... | tee benchmark.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "go"
          output-file-path: game/benchmark.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate Go documentation
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          cd game
          go list ./... | while read -r pkg; do
            go doc "$pkg" > /dev/null || true
          done
          echo "Documentation check completed"

      - name: Check documentation completeness
        run: |
          cd game
          echo "Checking for undocumented exports..."
          go list ./... | head -5 | while read -r pkg; do
            go doc "$pkg" | head -20 || true
          done
